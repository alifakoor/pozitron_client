import {
  toasteventbus_esm_default
} from "./chunk-DVQZJHZ2.js";
import {
  DomHandler,
  UniqueComponentId,
  ZIndexUtils
} from "./chunk-OKFMQSDA.js";
import {
  Fragment,
  Teleport,
  TransitionGroup,
  createBlock,
  createCommentVNode,
  createVNode,
  mergeProps,
  openBlock,
  renderList,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  toDisplayString,
  withCtx,
  withDirectives
} from "./chunk-HS3JC4CV.js";
import "./chunk-OF7PY2J2.js";

// node_modules/primevue/ripple/ripple.esm.js
function bindEvents(el) {
  el.addEventListener("mousedown", onMouseDown);
}
function unbindEvents(el) {
  el.removeEventListener("mousedown", onMouseDown);
}
function create(el) {
  let ink = document.createElement("span");
  ink.className = "p-ink";
  el.appendChild(ink);
  ink.addEventListener("animationend", onAnimationEnd);
}
function remove(el) {
  let ink = getInk(el);
  if (ink) {
    unbindEvents(el);
    ink.removeEventListener("animationend", onAnimationEnd);
    ink.remove();
  }
}
function onMouseDown(event) {
  let target = event.currentTarget;
  let ink = getInk(target);
  if (!ink || getComputedStyle(ink, null).display === "none") {
    return;
  }
  DomHandler.removeClass(ink, "p-ink-active");
  if (!DomHandler.getHeight(ink) && !DomHandler.getWidth(ink)) {
    let d = Math.max(DomHandler.getOuterWidth(target), DomHandler.getOuterHeight(target));
    ink.style.height = d + "px";
    ink.style.width = d + "px";
  }
  let offset = DomHandler.getOffset(target);
  let x = event.pageX - offset.left + document.body.scrollTop - DomHandler.getWidth(ink) / 2;
  let y = event.pageY - offset.top + document.body.scrollLeft - DomHandler.getHeight(ink) / 2;
  ink.style.top = y + "px";
  ink.style.left = x + "px";
  DomHandler.addClass(ink, "p-ink-active");
}
function onAnimationEnd(event) {
  DomHandler.removeClass(event.currentTarget, "p-ink-active");
}
function getInk(el) {
  for (let i = 0; i < el.children.length; i++) {
    if (typeof el.children[i].className === "string" && el.children[i].className.indexOf("p-ink") !== -1) {
      return el.children[i];
    }
  }
  return null;
}
var Ripple = {
  mounted(el, binding) {
    if (binding.instance.$primevue && binding.instance.$primevue.config && binding.instance.$primevue.config.ripple) {
      create(el);
      bindEvents(el);
    }
  },
  unmounted(el) {
    remove(el);
  }
};
var ripple_esm_default = Ripple;

// node_modules/primevue/toast/toast.esm.js
var script$1 = {
  name: "ToastMessage",
  emits: ["close"],
  props: {
    message: null,
    template: null
  },
  closeTimeout: null,
  mounted() {
    if (this.message.life) {
      this.closeTimeout = setTimeout(() => {
        this.close();
      }, this.message.life);
    }
  },
  beforeUnmount() {
    this.clearCloseTimeout();
  },
  methods: {
    close() {
      this.$emit("close", this.message);
    },
    onCloseClick() {
      this.clearCloseTimeout();
      this.close();
    },
    clearCloseTimeout() {
      if (this.closeTimeout) {
        clearTimeout(this.closeTimeout);
        this.closeTimeout = null;
      }
    }
  },
  computed: {
    containerClass() {
      return ["p-toast-message", this.message.styleClass, {
        "p-toast-message-info": this.message.severity === "info",
        "p-toast-message-warn": this.message.severity === "warn",
        "p-toast-message-error": this.message.severity === "error",
        "p-toast-message-success": this.message.severity === "success"
      }];
    },
    iconClass() {
      return ["p-toast-message-icon pi", {
        "pi-info-circle": this.message.severity === "info",
        "pi-exclamation-triangle": this.message.severity === "warn",
        "pi-times": this.message.severity === "error",
        "pi-check": this.message.severity === "success"
      }];
    }
  },
  directives: {
    "ripple": ripple_esm_default
  }
};
var _hoisted_1 = { class: "p-toast-message-text" };
var _hoisted_2 = { class: "p-toast-summary" };
var _hoisted_3 = { class: "p-toast-detail" };
var _hoisted_4 = createVNode("span", { class: "p-toast-icon-close-icon pi pi-times" }, null, -1);
function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _directive_ripple = resolveDirective("ripple");
  return openBlock(), createBlock("div", {
    class: $options.containerClass,
    role: "alert",
    "aria-live": "assertive",
    "aria-atomic": "true"
  }, [
    createVNode("div", {
      class: ["p-toast-message-content", $props.message.contentStyleClass]
    }, [
      !$props.template ? (openBlock(), createBlock(Fragment, { key: 0 }, [
        createVNode("span", { class: $options.iconClass }, null, 2),
        createVNode("div", _hoisted_1, [
          createVNode("span", _hoisted_2, toDisplayString($props.message.summary), 1),
          createVNode("div", _hoisted_3, toDisplayString($props.message.detail), 1)
        ])
      ], 64)) : (openBlock(), createBlock(resolveDynamicComponent($props.template), {
        key: 1,
        message: $props.message
      }, null, 8, ["message"])),
      $props.message.closable !== false ? withDirectives((openBlock(), createBlock("button", {
        key: 2,
        class: "p-toast-icon-close p-link",
        onClick: _cache[1] || (_cache[1] = (...args) => $options.onCloseClick && $options.onCloseClick(...args)),
        type: "button"
      }, [
        _hoisted_4
      ], 512)), [
        [_directive_ripple]
      ]) : createCommentVNode("", true)
    ], 2)
  ], 2);
}
script$1.render = render$1;
var messageIdx = 0;
var script = {
  name: "Toast",
  inheritAttrs: false,
  props: {
    group: {
      type: String,
      default: null
    },
    position: {
      type: String,
      default: "top-right"
    },
    autoZIndex: {
      type: Boolean,
      default: true
    },
    baseZIndex: {
      type: Number,
      default: 0
    },
    breakpoints: {
      type: Object,
      default: null
    }
  },
  data() {
    return {
      messages: []
    };
  },
  styleElement: null,
  mounted() {
    toasteventbus_esm_default.on("add", this.onAdd);
    toasteventbus_esm_default.on("remove-group", this.onRemoveGroup);
    toasteventbus_esm_default.on("remove-all-groups", this.onRemoveAllGroups);
    if (this.breakpoints) {
      this.createStyle();
    }
  },
  beforeUnmount() {
    this.destroyStyle();
    if (this.$refs.container && this.autoZIndex) {
      ZIndexUtils.clear(this.$refs.container);
    }
    toasteventbus_esm_default.off("add", this.onAdd);
    toasteventbus_esm_default.off("remove-group", this.onRemoveGroup);
    toasteventbus_esm_default.off("remove-all-groups", this.onRemoveAllGroups);
  },
  methods: {
    add(message) {
      if (message.id == null) {
        message.id = messageIdx++;
      }
      this.messages = [...this.messages, message];
    },
    remove(message) {
      let index = -1;
      for (let i = 0; i < this.messages.length; i++) {
        if (this.messages[i] === message) {
          index = i;
          break;
        }
      }
      this.messages.splice(index, 1);
    },
    onAdd(message) {
      if (this.group == message.group) {
        this.add(message);
      }
    },
    onRemoveGroup(group) {
      if (this.group === group) {
        this.messages = [];
      }
    },
    onRemoveAllGroups() {
      this.messages = [];
    },
    onEnter() {
      this.$refs.container.setAttribute(this.attributeSelector, "");
      if (this.autoZIndex) {
        ZIndexUtils.set("modal", this.$refs.container, this.baseZIndex || this.$primevue.config.zIndex.modal);
      }
    },
    onLeave() {
      if (this.$refs.container && this.autoZIndex) {
        ZIndexUtils.clear(this.$refs.container);
      }
    },
    createStyle() {
      if (!this.styleElement) {
        this.styleElement = document.createElement("style");
        this.styleElement.type = "text/css";
        document.head.appendChild(this.styleElement);
        let innerHTML = "";
        for (let breakpoint in this.breakpoints) {
          let breakpointStyle = "";
          for (let styleProp in this.breakpoints[breakpoint]) {
            breakpointStyle += styleProp + ":" + this.breakpoints[breakpoint][styleProp] + "!important;";
          }
          innerHTML += `
                        @media screen and (max-width: ${breakpoint}) {
                            .p-toast[${this.attributeSelector}] {
                                ${breakpointStyle}
                            }
                        }
                    `;
        }
        this.styleElement.innerHTML = innerHTML;
      }
    },
    destroyStyle() {
      if (this.styleElement) {
        document.head.removeChild(this.styleElement);
        this.styleElement = null;
      }
    }
  },
  components: {
    "ToastMessage": script$1
  },
  computed: {
    containerClass() {
      return ["p-toast p-component p-toast-" + this.position, {
        "p-input-filled": this.$primevue.config.inputStyle === "filled",
        "p-ripple-disabled": this.$primevue.config.ripple === false
      }];
    },
    attributeSelector() {
      return UniqueComponentId();
    }
  }
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ToastMessage = resolveComponent("ToastMessage");
  return openBlock(), createBlock(Teleport, { to: "body" }, [
    createVNode("div", mergeProps({
      ref: "container",
      class: $options.containerClass
    }, _ctx.$attrs), [
      createVNode(TransitionGroup, {
        name: "p-toast-message",
        tag: "div",
        onEnter: $options.onEnter,
        onLeave: $options.onLeave
      }, {
        default: withCtx(() => [
          (openBlock(true), createBlock(Fragment, null, renderList($data.messages, (msg) => {
            return openBlock(), createBlock(_component_ToastMessage, {
              key: msg.id,
              message: msg,
              onClose: _cache[1] || (_cache[1] = ($event) => $options.remove($event)),
              template: _ctx.$slots.message
            }, null, 8, ["message", "template"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["onEnter", "onLeave"])
    ], 16)
  ]);
}
function styleInject(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = "\n.p-toast {\n    position: fixed;\n    width: 25rem;\n}\n.p-toast-message-content {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: start;\n        -ms-flex-align: start;\n            align-items: flex-start;\n}\n.p-toast-message-text {\n    -webkit-box-flex: 1;\n        -ms-flex: 1 1 auto;\n            flex: 1 1 auto;\n}\n.p-toast-top-right {\n	top: 20px;\n	right: 20px;\n}\n.p-toast-top-left {\n	top: 20px;\n	left: 20px;\n}\n.p-toast-bottom-left {\n	bottom: 20px;\n	left: 20px;\n}\n.p-toast-bottom-right {\n	bottom: 20px;\n	right: 20px;\n}\n.p-toast-top-center {\n	top: 20px;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n}\n.p-toast-bottom-center {\n	bottom: 20px;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n}\n.p-toast-center {\n	left: 50%;\n	top: 50%;\n    min-width: 20vw;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n}\n.p-toast-icon-close {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    overflow: hidden;\n    position: relative;\n}\n.p-toast-icon-close.p-link {\n	cursor: pointer;\n}\n\n/* Animations */\n.p-toast-message-enter-from {\n    opacity: 0;\n    -webkit-transform: translateY(50%);\n    transform: translateY(50%);\n}\n.p-toast-message-leave-from {\n    max-height: 1000px;\n}\n.p-toast .p-toast-message.p-toast-message-leave-to {\n    max-height: 0;\n    opacity: 0;\n    margin-bottom: 0;\n    overflow: hidden;\n}\n.p-toast-message-enter-active {\n    -webkit-transition: transform .3s, opacity .3s;\n    -webkit-transition: opacity .3s, -webkit-transform .3s;\n    transition: opacity .3s, -webkit-transform .3s;\n    transition: transform .3s, opacity .3s;\n    transition: transform .3s, opacity .3s, -webkit-transform .3s;\n}\n.p-toast-message-leave-active {\n    -webkit-transition: max-height .45s cubic-bezier(0, 1, 0, 1), opacity .3s, margin-bottom .3s;\n    transition: max-height .45s cubic-bezier(0, 1, 0, 1), opacity .3s, margin-bottom .3s;\n}\n";
styleInject(css_248z);
script.render = render;
var toast_esm_default = script;

// dep:primevue_toast
var primevue_toast_default = toast_esm_default;
export {
  primevue_toast_default as default
};
//# sourceMappingURL=primevue_toast.js.map
